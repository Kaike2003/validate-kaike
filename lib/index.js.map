{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["export const validate = async (\r\n  validations: { fn: (input: string) => { message: string; value: string }; input: string }[]\r\n) => {\r\n  const results = await Promise.allSettled(\r\n    validations.map(\r\n      ({ fn, input }) =>\r\n        new Promise((resolve, reject) => {\r\n          try {\r\n            resolve(fn(input));\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        })\r\n    )\r\n  );\r\n\r\n  const errors = results.filter((r) => r.status === \"rejected\").map((r) => (r as PromiseRejectedResult).reason);\r\n\r\n  return errors.length > 0\r\n    ? Promise.reject(errors)\r\n    : Promise.resolve(results.map((r) => (r as PromiseFulfilledResult<{ message: string; value: string }>).value));\r\n};\r\n\r\nexport const IsEmail = (email: string) => {\r\n  let regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n  if (regex.test(email)) return { message: \"Valid email\", value: email };\r\n  throw { message: \"Invalid email\", value: email };\r\n};\r\n\r\nexport const IsBi = (bi: string) => {\r\n  let regex = /^\\d{9}[A-Z]{2}\\d{3}$/;\r\n  if (regex.test(bi)) return { message: \"Valid identity card\", value: bi };\r\n  throw { message: \"Invalid identity card\", value: bi };\r\n};\r\n\r\nexport const IsIban = (iban: string) => {\r\n  let regex = /^[A-Z]{2}\\d{2}[A-Z0-9]{11,30}$/;\r\n  if (regex.test(iban)) return { message: \"Valid Iban\", value: iban };\r\n  throw { message: \"Invalid Iban\", value: iban };\r\n};\r\n\r\nexport const IsPassport = (passport: string) => {\r\n  let regex = /^[A-Z]{1,2}[0-9]{6,9}$/;\r\n  if (regex.test(passport)) return { message: \"Valid passport\", value: passport };\r\n  throw { message: \"Invalid passport\", value: passport };\r\n};\r\n"],
  "mappings": "AAAO,IAAMA,EAAW,MACtBC,GACG,CACH,IAAMC,EAAU,MAAM,QAAQ,WAC5BD,EAAY,IACV,CAAC,CAAE,GAAAE,EAAI,MAAAC,CAAM,IACX,IAAI,QAAQ,CAACC,EAASC,IAAW,CAC/B,GAAI,CACFD,EAAQF,EAAGC,CAAK,CAAC,CACnB,OAASG,EAAO,CACdD,EAAOC,CAAK,CACd,CACF,CAAC,CACL,CACF,EAEMC,EAASN,EAAQ,OAAQO,GAAMA,EAAE,SAAW,UAAU,EAAE,IAAKA,GAAOA,EAA4B,MAAM,EAE5G,OAAOD,EAAO,OAAS,EACnB,QAAQ,OAAOA,CAAM,EACrB,QAAQ,QAAQN,EAAQ,IAAKO,GAAOA,EAAiE,KAAK,CAAC,CACjH,EAEaC,EAAWC,GAAkB,CAExC,GADY,mDACF,KAAKA,CAAK,EAAG,MAAO,CAAE,QAAS,cAAe,MAAOA,CAAM,EACrE,KAAM,CAAE,QAAS,gBAAiB,MAAOA,CAAM,CACjD,EAEaC,EAAQC,GAAe,CAElC,GADY,uBACF,KAAKA,CAAE,EAAG,MAAO,CAAE,QAAS,sBAAuB,MAAOA,CAAG,EACvE,KAAM,CAAE,QAAS,wBAAyB,MAAOA,CAAG,CACtD,EAEaC,EAAUC,GAAiB,CAEtC,GADY,iCACF,KAAKA,CAAI,EAAG,MAAO,CAAE,QAAS,aAAc,MAAOA,CAAK,EAClE,KAAM,CAAE,QAAS,eAAgB,MAAOA,CAAK,CAC/C,EAEaC,EAAcC,GAAqB,CAE9C,GADY,yBACF,KAAKA,CAAQ,EAAG,MAAO,CAAE,QAAS,iBAAkB,MAAOA,CAAS,EAC9E,KAAM,CAAE,QAAS,mBAAoB,MAAOA,CAAS,CACvD",
  "names": ["validate", "validations", "results", "fn", "input", "resolve", "reject", "error", "errors", "r", "IsEmail", "email", "IsBi", "bi", "IsIban", "iban", "IsPassport", "passport"]
}
